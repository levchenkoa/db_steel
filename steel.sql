
USE WRONG_DB_NAME --Указать имя используемой для SCADA БД;
GO
SET ANSI_NULLS ON;
GO

SET QUOTED_IDENTIFIER ON;
GO

SET NOCOUNT ON;
GO

/*Обнуление системных таблиц SCADA*/

IF OBJECT_ID(N'[dbo].[actions_data]',N'U') IS NOT NULL
	TRUNCATE TABLE [dbo].[actions_data];
GO
IF OBJECT_ID(N'[dbo].[messages_data]',N'U') IS NOT NULL
	TRUNCATE TABLE [dbo].[messages_data];
GO
IF OBJECT_ID(N'[dbo].[trends_data]',N'U') IS NOT NULL
	TRUNCATE TABLE [dbo].[trends_data];
GO
IF OBJECT_ID(N'[dbo].[trends_day]',N'U') IS NOT NULL
	TRUNCATE TABLE [dbo].[trends_day];
GO
IF OBJECT_ID(N'[dbo].[trends_hour]',N'U') IS NOT NULL
	TRUNCATE TABLE [dbo].[trends_hour];
GO
IF OBJECT_ID(N'[dbo].[trends_minute]',N'U') IS NOT NULL
	TRUNCATE TABLE [dbo].[trends_minute];
GO

/*DROP TABLES*/
IF OBJECT_ID(N'[dbo].[LOADDETAIL]',N'U') IS NOT NULL
	DROP TABLE [dbo].[LOADDETAIL];
GO
IF OBJECT_ID(N'[dbo].[LOADDETAILS]',N'U') IS NOT NULL
	DROP TABLE [dbo].[LOADDETAILS];
GO
IF OBJECT_ID(N'[dbo].[PARTS]',N'U') IS NOT NULL
	DROP TABLE [dbo].[PARTS];
GO
IF OBJECT_ID(N'[dbo].[LOADS]',N'U') IS NOT NULL
	DROP TABLE [dbo].[LOADS]
GO
IF OBJECT_ID(N'[dbo].[SYSDATA]',N'U') IS NOT NULL
	DROP TABLE [dbo].[SYSDATA]
GO
IF OBJECT_ID(N'[dbo].[TREATMENTTYPES]',N'U') IS NOT NULL
	DROP TABLE [dbo].[TREATMENTTYPES]
GO

/*DROP TRIGGERS*/
IF OBJECT_ID(N'[dbo].[LOADS_UPDATE]',N'TR') IS NOT NULL
	DROP TRIGGER [dbo].[LOADS_UPDATE]
GO

/*DROP PROCEDURES*/
IF OBJECT_ID(N'dbo.spGetLoadNumber',N'P') IS NOT NULL
	DROP PROCEDURE spGetLoadNumber;
GO
IF OBJECT_ID(N'dbo.spSelectNextLoadNumber',N'P') IS NOT NULL
	DROP PROCEDURE spSelectNextLoadNumber;
GO
IF OBJECT_ID(N'dbo.spInsertLoad',N'P') IS NOT NULL
	DROP PROCEDURE spInsertLoad;
GO
 IF OBJECT_ID(N'dbo.spSelectCurrLoad',N'P') IS NOT NULL
	DROP PROCEDURE spSelectCurrLoad;
GO
 IF OBJECT_ID(N'dbo.spUpdateCurrLoad',N'P') IS NOT NULL
	DROP PROCEDURE spUpdateCurrLoad;
GO
 IF OBJECT_ID(N'dbo.spSelectLoads',N'P') IS NOT NULL
	DROP PROCEDURE spSelectLoads;
GO
 IF OBJECT_ID(N'dbo.spSelectCurrLoads',N'P') IS NOT NULL
	DROP PROCEDURE spSelectCurrLoads;
GO
 IF OBJECT_ID(N'dbo.spSelectLoadDetail',N'P') IS NOT NULL
	DROP PROCEDURE spSelectLoadDetail;
GO
 IF OBJECT_ID(N'dbo.spSelectLoadDetailsByLoadId',N'P') IS NOT NULL
	DROP PROCEDURE spSelectLoadDetailsByLoadId;
GO
 IF OBJECT_ID(N'dbo.spUpdateLoadDetail',N'P') IS NOT NULL
	DROP PROCEDURE spUpdateLoadDetail;
GO
 IF OBJECT_ID(N'dbo.spDeleteLoadDetail',N'P') IS NOT NULL
	DROP PROCEDURE spDeleteLoadDetail;
GO
 IF OBJECT_ID(N'dbo.spSelectParts',N'P') IS NOT NULL
	DROP PROCEDURE spSelectParts;
GO
 IF OBJECT_ID(N'dbo.spInsertParts',N'P') IS NOT NULL
	DROP PROCEDURE spInsertParts;
GO
IF OBJECT_ID(N'dbo.spUpdateParts',N'P') IS NOT NULL
	DROP PROCEDURE spUpdateParts;
GO
/*Создание таблиц*/
/*Типы термообработки*/
CREATE TABLE TREATMENTTYPES
(TREATMENT_ID TINYINT NOT NULL  PRIMARY KEY,
TREATMENT_NAME NVARCHAR(40) NOT NULL
)
IF OBJECT_ID(N'[dbo].[TREATMENTTYPES]',N'U') IS NOT NULL
	INSERT INTO TREATMENTTYPES(TREATMENT_ID,TREATMENT_NAME) VALUES 
	(1,N'Нормализация'),
	(2,N'Отпуск');
GO

/*Справочник отливок*/
CREATE TABLE PARTS
(PART_ID INT NOT NULL IDENTITY PRIMARY KEY,
PART_CODE NVARCHAR(20) NOT NULL ,
PART_DESCRIPTION NVARCHAR(40) NOT NULL ,
MAX_PARTS_TRAY TINYINT NOT NULL,
PART_WEIGHT SMALLINT NOT NULL,
PART_COMMENT NVARCHAR(100) DEFAULT '',
PART_TIMESTAMP DATETIME DEFAULT GETDATE()
CONSTRAINT UQ_PART_CODE UNIQUE(PART_CODE)
)
GO
/*Таблица загрузок*/
CREATE TABLE LOADS
(LOAD_ID INT NOT NULL IDENTITY PRIMARY KEY,
LOAD_NUMBER NVARCHAR(20) NOT NULL,
FURNACE_NUMBER NVARCHAR (20) NOT NULL,
TREATMENT_TYPE TINYINT NOT NULL REFERENCES TREATMENTTYPES(TREATMENT_ID),
CMD_LOAD_START DATETIME NOT NULL DEFAULT GETDATE(), 
CMD_LOAD_STOP DATETIME,
UNIT_INDEX TINYINT NOT NULL,
ISERROR BIT DEFAULT 0
--CONSTRAINT AK_LOAD_NUMBER UNIQUE(LOAD_NUMBER)            
)
GO

/*Данные по отливкам в загрузке (связь загрузка - отливки)*/
CREATE TABLE LOADDETAILS
(
ID INT IDENTITY PRIMARY KEY,
LOAD_ID INT NOT NULL CONSTRAINT FK_LOAD_ID REFERENCES LOADS(LOAD_ID),
PART_ID INT NOT NULL CONSTRAINT FK_PART_ID REFERENCES PARTS(PART_ID),
SERIAL_NUMBER NVARCHAR (20),

--PRIMARY KEY (LOAD_ID,PART_ID)
)
GO

/*Служебная таблица  - Используется для генерации номера садки*/
CREATE TABLE SYSDATA
(
ID BIT DEFAULT 1,
CURR_DATE DATE DEFAULT GETDATE(),
CURR_NUM INT
)
GO
IF OBJECT_ID(N'[dbo].[SYSDATA]',N'U') IS NOT NULL
	INSERT INTO SYSDATA(ID,CURR_DATE,CURR_NUM) VALUES (1,GETDATE(),1);
GO

/*Служебная таблица  - Используется для составления текущей загрузки*/
CREATE TABLE LOADDETAIL (
ID INT IDENTITY, 
PART_ID INT,
SERIAL_NUMBER NVARCHAR (20)
CONSTRAINT UQ_LOADDTETAIL UNIQUE(PART_ID,SERIAL_NUMBER)   
 )
GO

--Возвращает в переменную новый номер загрузки
CREATE PROC dbo.spGetLoadNumber
 	 @RESULT NVARCHAR(20) OUTPUT
AS   
	BEGIN  
		DECLARE @CURR_DATE DATE, @CURR_NUM INT, @NEW_DATE DATE;
		SELECT @CURR_DATE=CURR_DATE FROM SYSDATA;
		SELECT @CURR_NUM = CURR_NUM FROM SYSDATA;
		SET @NEW_DATE= GETDATE();
		IF (@CURR_DATE!=@NEW_DATE)
			BEGIN 
				UPDATE SYSDATA SET CURR_DATE=@NEW_DATE, CURR_NUM=1 WHERE ID = 1;
			END
		SELECT @RESULT= CONVERT(nvarchar(30), CURR_DATE, 112)+' '+ RIGHT(N'0000' + CONVERT(VARCHAR(4),CURR_NUM), 4) FROM SYSDATA;
		RETURN 
	END; 
GO


/*При формировании загрузки переносит данные из служебной таблицы LOADDETAIL и обнуляет ее*/
CREATE TRIGGER LOADS_INSERT
	ON LOADS
	AFTER INSERT
AS
	DECLARE @ID INT;
	SELECT @ID = LOAD_ID FROM inserted;
	IF OBJECT_ID(N'[dbo].[LOADDETAIL]',N'U') IS NOT NULL
		BEGIN
		INSERT INTO LOADDETAILS (LOAD_ID,PART_ID,SERIAL_NUMBER) SELECT @ID, PART_ID,SERIAL_NUMBER FROM LOADDETAIL;
		TRUNCATE TABLE LOADDETAIL; 
		END;
	UPDATE SYSDATA SET CURR_NUM=CURR_NUM+1 WHERE ID = 1;
GO

/*Добавляет новую загрузку и возвращает ее ID*/
CREATE PROC dbo.spInsertLoad
 	 @FURNACE_NUMBER NVARCHAR(20),
	 @TREATMENT_TYPE INT,
	 @UNIT_INDEX TINYINT
AS   
	BEGIN  
		DECLARE @NUMBER NVARCHAR(20);
		EXEC spGetLoadNumber @RESULT = @NUMBER OUTPUT;
		INSERT INTO LOADS(LOAD_NUMBER,FURNACE_NUMBER,TREATMENT_TYPE,UNIT_INDEX) VALUES (@NUMBER,@FURNACE_NUMBER,@TREATMENT_TYPE,@UNIT_INDEX );
		SELECT LOAD_ID,FURNACE_NUMBER,LOAD_NUMBER FROM LOADS WHERE LOAD_ID = SCOPE_IDENTITY();
	END; 
GO

/*Выводит загрузку по ID*/
CREATE PROC dbo.spSelectCurrLoad
	@LOAD_ID INT
AS
	BEGIN
	SELECT LOAD_NUMBER 'Номер садки',FURNACE_NUMBER N'Номер печи',TREATMENT_NAME'Вид термообработки', 
	CONVERT(nvarchar(10), CMD_LOAD_START, 4) +' '+ CONVERT(nvarchar(10), CMD_LOAD_START, 108) 'Загружена',CMD_LOAD_START, LOAD_ID  FROM LOADS JOIN TREATMENTTYPES ON TREATMENT_TYPE=TREATMENT_ID WHERE LOAD_ID = @LOAD_ID;
	END;
GO

/*Процедура поиска загрузок на основании фильтра поиска в SCADA*/
CREATE PROC dbo.spSelectLoads
		@DateFrom DATETIME = NULL,
		@DateTo DATETIME = NULL,
		@FurnaceNumber INT = 0,
		@LoadNumber NVARCHAR(20) = '',
		@TreatmentType TINYINT = 0,
		@PartId INT = 0,
		@PartSerialNumber  NVARCHAR(20) = '',
		@param1 INT = 0,
		@param2 INT = 0
	AS
		BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY E.LOAD_ID) "№ п\п",* FROM (SELECT DISTINCT A.LOAD_NUMBER 'Номер садки','Печь № '+A.FURNACE_NUMBER 'Номер печи',B.TREATMENT_NAME'Вид термообработки', 
			CONVERT(nvarchar(30), A.CMD_LOAD_START, 120) 'Загружена',ISNULL(CONVERT(nvarchar(30), A.CMD_LOAD_STOP, 120) ,'-') 'Выгружена',A.LOAD_ID,ISNULL(CONVERT(BIT,A.CMD_LOAD_STOP),0) ISFINISHED, 
			A.ISERROR, A.UNIT_INDEX  FROM LOADS A  JOIN TREATMENTTYPES B ON A.TREATMENT_TYPE=B.TREATMENT_ID  JOIN LOADDETAILS C ON A.LOAD_ID=C.LOAD_ID
			JOIN  PARTS D ON C.PART_ID = D.PART_ID
			WHERE  CMD_LOAD_START BETWEEN ISNULL(@DateFrom,'1900-01-01T00:00:00') AND ISNULL(@DateTo,'2100-01-01T00:00:00') 
			   AND A.LOAD_ID NOT IN (@param1,@param2)
			   AND A.FURNACE_NUMBER =  IIF (@FurnaceNumber =0, A.FURNACE_NUMBER, @FurnaceNumber)
		       AND A.LOAD_NUMBER LIKE IIF (@LoadNumber = '', A.LOAD_NUMBER, @LoadNumber)
			   AND A.TREATMENT_TYPE =  IIF (@TreatmentType =0, A.TREATMENT_TYPE, @TreatmentType)
			   AND SERIAL_NUMBER LIKE IIF (@PartSerialNumber = '', SERIAL_NUMBER, @PartSerialNumber)
			   AND D.PART_ID =  IIF (@PartId =0, D.PART_ID, @PartId)) E;


	END;
GO

CREATE PROC dbo.spSelectCurrLoads
	@param1 INT = 0,
	@param2 INT = 0
	AS
		BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY E.LOAD_ID) "№ п\п",* FROM (SELECT DISTINCT A.LOAD_NUMBER 'Номер садки','Печь № '+A.FURNACE_NUMBER 'Номер печи',B.TREATMENT_NAME'Вид термообработки', 
				CONVERT(nvarchar(30), A.CMD_LOAD_START, 120) 'Загружена',A.LOAD_ID, A.UNIT_INDEX  FROM LOADS A  JOIN TREATMENTTYPES B ON A.TREATMENT_TYPE=B.TREATMENT_ID  
				WHERE 
			    A.LOAD_ID  IN (@param1,@param2)
				AND A.CMD_LOAD_STOP IS NULL) E;
	END;
GO




/*Обновляет загрузку по ID - используется для завершения загрузки в SCADA*/
CREATE PROC dbo.spUpdateCurrLoad
	@LOAD_ID INT,
	@ISERROR BIT,
	@CMD_LOAD_STOP DATETIME = NULL
AS
	BEGIN
		 UPDATE LOADS SET CMD_LOAD_STOP = ISNULL(@CMD_LOAD_STOP,GETDATE()), ISERROR = @ISERROR WHERE LOAD_ID = @LOAD_ID;
		 SELECT @@ROWCOUNT,LOAD_NUMBER,FURNACE_NUMBER FROM LOADS WHERE LOAD_ID = @LOAD_ID;
	END;
GO

/*Выводит номер следующей загрузки - используется в SCADA*/
CREATE PROC dbo.spSelectNextLoadNumber
AS   
	BEGIN  
		DECLARE @NUMBER NVARCHAR(20);
		EXEC spGetLoadNumber @RESULT = @NUMBER OUTPUT;
		SELECT @NUMBER;
	END; 
GO

/*Выводит данные служебной таблицы с информацией по отливкам при формировании загрузки - используется в SCADA*/
CREATE PROC dbo.spSelectLoadDetail
AS
BEGIN
IF OBJECT_ID(N'[dbo].[LOADDETAIL]',N'U') IS NOT NULL
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY ID) "№", ISNULL(PART_CODE + ' '+PART_DESCRIPTION,N'ОШИБКА! НЕТ В СПРАВОЧНИКЕ!') N'КОД ОТЛИВКИ',SERIAL_NUMBER 'СЕРИЙНЫЙ НОМЕР',
			ISNULL(CONVERT(nvarchar(10), PART_WEIGHT) ,'-') 'МАССА ОТЛИВКИ', ID 
			FROM LOADDETAIL A left JOIN PARTS B ON A.PART_ID = B.PART_ID ORDER BY ID;
	END;
END;
GO

/*Выводит данные служебной таблицы с информацией по отливкам при формировании загрузки - используется в SCADA*/
CREATE PROC dbo.spSelectLoadDetailsByLoadId
	@LOAD_ID INT
AS
BEGIN
IF OBJECT_ID(N'[dbo].[LOADDETAILS]',N'U') IS NOT NULL
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY ID) "№", PART_CODE + ' '+PART_DESCRIPTION 'КОД ОТЛИВКИ',SERIAL_NUMBER 'СЕРИЙНЫЙ НОМЕР',PART_WEIGHT 'МАССА ОТЛИВКИ' FROM LOADDETAILS A JOIN PARTS B ON A.PART_ID = B.PART_ID WHERE LOAD_ID = @LOAD_ID ORDER BY ID;
	END;
END;
GO
CREATE PROC dbo.spDeleteLoadDetail
@id int
AS
BEGIN
IF OBJECT_ID(N'[dbo].[LOADDETAIL]',N'U') IS NOT NULL
BEGIN
DELETE FROM LOADDETAIL WHERE ID = @ID;
END;
END;
GO
CREATE PROC dbo.spUpdateLoadDetail
@id int,
@serial_number int,
@part_id int
AS
BEGIN
	UPDATE LOADDETAIL SET PART_ID=@part_id, SERIAL_NUMBER=@serial_number WHERE ID = @id;
END;
GO
/*Работа с Отливками*/
CREATE PROC dbo.spSelectParts
AS
BEGIN
   SELECT ROW_NUMBER() OVER (ORDER BY PART_ID) "№",PART_ID N'ID', PART_CODE N'КОД ОТЛИВКИ',PART_DESCRIPTION  N'ОПИСАНИЕ ОТЛИВКИ' ,MAX_PARTS_TRAY N'МАКС.КОЛ-ВО',PART_WEIGHT N'МАССА ОТЛИВКИ',PART_COMMENT 'КОММЕНТАРИЙ',PART_TIMESTAMP N'МЕТКА ВРЕМЕНИ' FROM PARTS;
END;
GO
CREATE PROC dbo.spInsertParts
 	 @PART_CODE NVARCHAR(20),
	 @PART_DESCRIPTION NVARCHAR(40),
	 @MAX_PARTS_TRAY TINYINT,
	 @PART_WEIGHT SMALLINT,
	 @PART_COMMENT NVARCHAR(100) =''
AS     
	BEGIN  
	INSERT INTO PARTS (PART_CODE,PART_DESCRIPTION,MAX_PARTS_TRAY,PART_WEIGHT,PART_COMMENT) VALUES 
	(@PART_CODE,@PART_DESCRIPTION,@MAX_PARTS_TRAY,@PART_WEIGHT,@PART_COMMENT);
	END; 
GO
CREATE PROC dbo.spUpdateParts
 	 @PART_CODE NVARCHAR(20),
	 @PART_DESCRIPTION NVARCHAR(40),
	 @MAX_PARTS_TRAY TINYINT,
	 @PART_WEIGHT SMALLINT,
	 @PART_COMMENT NVARCHAR(100) ='',
	 @PART_ID INT
AS     
	BEGIN  
	UPDATE PARTS SET 
	PART_CODE = @PART_CODE,
	PART_DESCRIPTION = @PART_DESCRIPTION,
	MAX_PARTS_TRAY = @MAX_PARTS_TRAY,
	PART_WEIGHT = @PART_WEIGHT,
	PART_COMMENT = @PART_COMMENT,
	PART_TIMESTAMP = GETDATE()
	WHERE PART_ID = @PART_ID;
	END; 
GO

--CODE SNIPPTES - НЕ УДАЛЯТЬ!
/*
BEGIN TRY
DECLARE @VAL NVARCHAR(20);
SET @VAL = 'Отпуск';
INSERT INTO TREATMENTTYPES VALUES (@VAL);
END TRY
BEGIN CATCH
	IF (ERROR_NUMBER()=2627)  
		THROW 500001,@VAL,1;


END CATCH;
*/


/*
CREATE TRIGGER LOADS_UPDATE
	ON LOADS
	AFTER UPDATE
AS
	IF (UPDATE (ISFINISHED)  )  
			UPDATE LOADS SET CMD_LOAD_STOP = GETDATE() WHERE LOAD_ID IN (SELECT LOAD_ID FROM INSERTED);	
GO
*/




